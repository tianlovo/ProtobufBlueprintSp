/*@ fixed */

#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExampleSubProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ExampleSubProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ExampleSubProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ExampleSubProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ExampleSubProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ExampleSubProto_2eproto;
namespace ProtobufBlueprintSp {
class ExampleSubProto;
struct ExampleSubProtoDefaultTypeInternal;
extern ExampleSubProtoDefaultTypeInternal _ExampleSubProto_default_instance_;
}  // namespace ProtobufBlueprintSp
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtobufBlueprintSp::ExampleSubProto* Arena::CreateMaybeMessage<::ProtobufBlueprintSp::ExampleSubProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtobufBlueprintSp {

// ===================================================================

class ExampleSubProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtobufBlueprintSp.ExampleSubProto) */ {
 public:
  inline ExampleSubProto() : ExampleSubProto(nullptr) {}
  ~ExampleSubProto() override;
  explicit constexpr ExampleSubProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleSubProto(const ExampleSubProto& from);
  ExampleSubProto(ExampleSubProto&& from) noexcept
    : ExampleSubProto() {
    *this = ::std::move(from);
  }

  inline ExampleSubProto& operator=(const ExampleSubProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleSubProto& operator=(ExampleSubProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleSubProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExampleSubProto* internal_default_instance() {
    return reinterpret_cast<const ExampleSubProto*>(
               &_ExampleSubProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExampleSubProto& a, ExampleSubProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleSubProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleSubProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExampleSubProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExampleSubProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleSubProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExampleSubProto& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleSubProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtobufBlueprintSp.ExampleSubProto";
  }
  protected:
  explicit ExampleSubProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt64ValsFieldNumber = 4,
    kDoubleValsFieldNumber = 5,
    kStringValsFieldNumber = 6,
    kStringValFieldNumber = 2,
    kBytesValFieldNumber = 3,
    kInt32ValFieldNumber = 1,
  };
  // repeated int64 int64_vals = 4;
  int int64_vals_size() const;
  private:
  int _internal_int64_vals_size() const;
  public:
  void clear_int64_vals();
  private:
  int64_t _internal_int64_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_int64_vals() const;
  void _internal_add_int64_vals(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_int64_vals();
  public:
  int64_t int64_vals(int index) const;
  void set_int64_vals(int index, int64_t value);
  void add_int64_vals(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      int64_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_int64_vals();

  // repeated double double_vals = 5;
  int double_vals_size() const;
  private:
  int _internal_double_vals_size() const;
  public:
  void clear_double_vals();
  private:
  double _internal_double_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_vals() const;
  void _internal_add_double_vals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_vals();
  public:
  double double_vals(int index) const;
  void set_double_vals(int index, double value);
  void add_double_vals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_vals();

  // repeated string string_vals = 6;
  int string_vals_size() const;
  private:
  int _internal_string_vals_size() const;
  public:
  void clear_string_vals();
  const std::string& string_vals(int index) const;
  std::string* mutable_string_vals(int index);
  void set_string_vals(int index, const std::string& value);
  void set_string_vals(int index, std::string&& value);
  void set_string_vals(int index, const char* value);
  void set_string_vals(int index, const char* value, size_t size);
  std::string* add_string_vals();
  void add_string_vals(const std::string& value);
  void add_string_vals(std::string&& value);
  void add_string_vals(const char* value);
  void add_string_vals(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_vals();
  private:
  const std::string& _internal_string_vals(int index) const;
  std::string* _internal_add_string_vals();
  public:

  // string string_val = 2;
  void clear_string_val();
  const std::string& string_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_val();
  PROTOBUF_NODISCARD std::string* release_string_val();
  void set_allocated_string_val(std::string* string_val);
  private:
  const std::string& _internal_string_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_val(const std::string& value);
  std::string* _internal_mutable_string_val();
  public:

  // bytes bytes_val = 3;
  void clear_bytes_val();
  const std::string& bytes_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_val();
  PROTOBUF_NODISCARD std::string* release_bytes_val();
  void set_allocated_bytes_val(std::string* bytes_val);
  private:
  const std::string& _internal_bytes_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_val(const std::string& value);
  std::string* _internal_mutable_bytes_val();
  public:

  // int32 int32_val = 1;
  void clear_int32_val();
  int32_t int32_val() const;
  void set_int32_val(int32_t value);
  private:
  int32_t _internal_int32_val() const;
  void _internal_set_int32_val(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtobufBlueprintSp.ExampleSubProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > int64_vals_;
  mutable std::atomic<int> _int64_vals_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_vals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_val_;
  int32_t int32_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ExampleSubProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExampleSubProto

// int32 int32_val = 1;
inline void ExampleSubProto::clear_int32_val() {
  int32_val_ = 0;
}
inline int32_t ExampleSubProto::_internal_int32_val() const {
  return int32_val_;
}
inline int32_t ExampleSubProto::int32_val() const {
  // @@protoc_insertion_point(field_get:ProtobufBlueprintSp.ExampleSubProto.int32_val)
  return _internal_int32_val();
}
inline void ExampleSubProto::_internal_set_int32_val(int32_t value) {
  
  int32_val_ = value;
}
inline void ExampleSubProto::set_int32_val(int32_t value) {
  _internal_set_int32_val(value);
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.int32_val)
}

// string string_val = 2;
inline void ExampleSubProto::clear_string_val() {
  string_val_.ClearToEmpty();
}
inline const std::string& ExampleSubProto::string_val() const {
  // @@protoc_insertion_point(field_get:ProtobufBlueprintSp.ExampleSubProto.string_val)
  return _internal_string_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExampleSubProto::set_string_val(ArgT0&& arg0, ArgT... args) {
 
 string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.string_val)
}
inline std::string* ExampleSubProto::mutable_string_val() {
  std::string* _s = _internal_mutable_string_val();
  // @@protoc_insertion_point(field_mutable:ProtobufBlueprintSp.ExampleSubProto.string_val)
  return _s;
}
inline const std::string& ExampleSubProto::_internal_string_val() const {
  return string_val_.Get();
}
inline void ExampleSubProto::_internal_set_string_val(const std::string& value) {
  
  string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExampleSubProto::_internal_mutable_string_val() {
  
  return string_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExampleSubProto::release_string_val() {
  // @@protoc_insertion_point(field_release:ProtobufBlueprintSp.ExampleSubProto.string_val)
  return string_val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExampleSubProto::set_allocated_string_val(std::string* string_val) {
  if (string_val != nullptr) {
    
  } else {
    
  }
  string_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_val,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_val_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtobufBlueprintSp.ExampleSubProto.string_val)
}

// bytes bytes_val = 3;
inline void ExampleSubProto::clear_bytes_val() {
  bytes_val_.ClearToEmpty();
}
inline const std::string& ExampleSubProto::bytes_val() const {
  // @@protoc_insertion_point(field_get:ProtobufBlueprintSp.ExampleSubProto.bytes_val)
  return _internal_bytes_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExampleSubProto::set_bytes_val(ArgT0&& arg0, ArgT... args) {
 
 bytes_val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.bytes_val)
}
inline std::string* ExampleSubProto::mutable_bytes_val() {
  std::string* _s = _internal_mutable_bytes_val();
  // @@protoc_insertion_point(field_mutable:ProtobufBlueprintSp.ExampleSubProto.bytes_val)
  return _s;
}
inline const std::string& ExampleSubProto::_internal_bytes_val() const {
  return bytes_val_.Get();
}
inline void ExampleSubProto::_internal_set_bytes_val(const std::string& value) {
  
  bytes_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExampleSubProto::_internal_mutable_bytes_val() {
  
  return bytes_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExampleSubProto::release_bytes_val() {
  // @@protoc_insertion_point(field_release:ProtobufBlueprintSp.ExampleSubProto.bytes_val)
  return bytes_val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExampleSubProto::set_allocated_bytes_val(std::string* bytes_val) {
  if (bytes_val != nullptr) {
    
  } else {
    
  }
  bytes_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_val,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytes_val_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bytes_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProtobufBlueprintSp.ExampleSubProto.bytes_val)
}

// repeated int64 int64_vals = 4;
inline int ExampleSubProto::_internal_int64_vals_size() const {
  return int64_vals_.size();
}
inline int ExampleSubProto::int64_vals_size() const {
  return _internal_int64_vals_size();
}
inline void ExampleSubProto::clear_int64_vals() {
  int64_vals_.Clear();
}
inline int64_t ExampleSubProto::_internal_int64_vals(int index) const {
  return int64_vals_.Get(index);
}
inline int64_t ExampleSubProto::int64_vals(int index) const {
  // @@protoc_insertion_point(field_get:ProtobufBlueprintSp.ExampleSubProto.int64_vals)
  return _internal_int64_vals(index);
}
inline void ExampleSubProto::set_int64_vals(int index, int64_t value) {
  int64_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.int64_vals)
}
inline void ExampleSubProto::_internal_add_int64_vals(int64_t value) {
  int64_vals_.Add(value);
}
inline void ExampleSubProto::add_int64_vals(int64_t value) {
  _internal_add_int64_vals(value);
  // @@protoc_insertion_point(field_add:ProtobufBlueprintSp.ExampleSubProto.int64_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ExampleSubProto::_internal_int64_vals() const {
  return int64_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ExampleSubProto::int64_vals() const {
  // @@protoc_insertion_point(field_list:ProtobufBlueprintSp.ExampleSubProto.int64_vals)
  return _internal_int64_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ExampleSubProto::_internal_mutable_int64_vals() {
  return &int64_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ExampleSubProto::mutable_int64_vals() {
  // @@protoc_insertion_point(field_mutable_list:ProtobufBlueprintSp.ExampleSubProto.int64_vals)
  return _internal_mutable_int64_vals();
}

// repeated double double_vals = 5;
inline int ExampleSubProto::_internal_double_vals_size() const {
  return double_vals_.size();
}
inline int ExampleSubProto::double_vals_size() const {
  return _internal_double_vals_size();
}
inline void ExampleSubProto::clear_double_vals() {
  double_vals_.Clear();
}
inline double ExampleSubProto::_internal_double_vals(int index) const {
  return double_vals_.Get(index);
}
inline double ExampleSubProto::double_vals(int index) const {
  // @@protoc_insertion_point(field_get:ProtobufBlueprintSp.ExampleSubProto.double_vals)
  return _internal_double_vals(index);
}
inline void ExampleSubProto::set_double_vals(int index, double value) {
  double_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.double_vals)
}
inline void ExampleSubProto::_internal_add_double_vals(double value) {
  double_vals_.Add(value);
}
inline void ExampleSubProto::add_double_vals(double value) {
  _internal_add_double_vals(value);
  // @@protoc_insertion_point(field_add:ProtobufBlueprintSp.ExampleSubProto.double_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ExampleSubProto::_internal_double_vals() const {
  return double_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ExampleSubProto::double_vals() const {
  // @@protoc_insertion_point(field_list:ProtobufBlueprintSp.ExampleSubProto.double_vals)
  return _internal_double_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ExampleSubProto::_internal_mutable_double_vals() {
  return &double_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ExampleSubProto::mutable_double_vals() {
  // @@protoc_insertion_point(field_mutable_list:ProtobufBlueprintSp.ExampleSubProto.double_vals)
  return _internal_mutable_double_vals();
}

// repeated string string_vals = 6;
inline int ExampleSubProto::_internal_string_vals_size() const {
  return string_vals_.size();
}
inline int ExampleSubProto::string_vals_size() const {
  return _internal_string_vals_size();
}
inline void ExampleSubProto::clear_string_vals() {
  string_vals_.Clear();
}
inline std::string* ExampleSubProto::add_string_vals() {
  std::string* _s = _internal_add_string_vals();
  // @@protoc_insertion_point(field_add_mutable:ProtobufBlueprintSp.ExampleSubProto.string_vals)
  return _s;
}
inline const std::string& ExampleSubProto::_internal_string_vals(int index) const {
  return string_vals_.Get(index);
}
inline const std::string& ExampleSubProto::string_vals(int index) const {
  // @@protoc_insertion_point(field_get:ProtobufBlueprintSp.ExampleSubProto.string_vals)
  return _internal_string_vals(index);
}
inline std::string* ExampleSubProto::mutable_string_vals(int index) {
  // @@protoc_insertion_point(field_mutable:ProtobufBlueprintSp.ExampleSubProto.string_vals)
  return string_vals_.Mutable(index);
}
inline void ExampleSubProto::set_string_vals(int index, const std::string& value) {
  string_vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline void ExampleSubProto::set_string_vals(int index, std::string&& value) {
  string_vals_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline void ExampleSubProto::set_string_vals(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline void ExampleSubProto::set_string_vals(int index, const char* value, size_t size) {
  string_vals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline std::string* ExampleSubProto::_internal_add_string_vals() {
  return string_vals_.Add();
}
inline void ExampleSubProto::add_string_vals(const std::string& value) {
  string_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline void ExampleSubProto::add_string_vals(std::string&& value) {
  string_vals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline void ExampleSubProto::add_string_vals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline void ExampleSubProto::add_string_vals(const char* value, size_t size) {
  string_vals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtobufBlueprintSp.ExampleSubProto.string_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExampleSubProto::string_vals() const {
  // @@protoc_insertion_point(field_list:ProtobufBlueprintSp.ExampleSubProto.string_vals)
  return string_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExampleSubProto::mutable_string_vals() {
  // @@protoc_insertion_point(field_mutable_list:ProtobufBlueprintSp.ExampleSubProto.string_vals)
  return &string_vals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtobufBlueprintSp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ExampleSubProto_2eproto
